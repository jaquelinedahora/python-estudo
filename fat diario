# PROJEÇÕES
## Imports Bibliotecas
import pandas as pd
import warnings
from prophet import Prophet
import seaborn as sns # estáticas
import matplotlib.pyplot as plt
from sklearn.metrics import mean_absolute_percentage_error
import numpy as np
import holidays
warnings.filterwarnings('ignore')
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.model_selection import ParameterGrid
# Funções
def grid_search(y_train, y_test, params_grid, bt, holidays = None,verbose = False):
                 
    grid = ParameterGrid(params_grid)
    
    #model_parameters = pd.DataFrame(columns = ['MAPE','Parameters'])
    mape = []
    parameters = []
    for p in grid:
        train_model =Prophet(**p,
                         weekly_seasonality=True,
                         daily_seasonality = False,
                         yearly_seasonality = False,
                         interval_width=0.95,
                         holidays=holidays)
        train_model.add_country_holidays(country_name='BR')
        train_model.fit(y_train)
        
        test_forecast = train_model.make_future_dataframe(periods=bt, include_history = False)
        test_forecast = train_model.predict(test_forecast)

        #Calcula erro
        MAPE = mean_absolute_percentage_error(y_test['y'],abs(test_forecast['yhat']))

        if verbose:
            print('Mean Absolute Percentage Error(MAPE)------------------------------------',MAPE)
        
        mape.append(MAPE)
        parameters.append(p)
    model_parameters = pd.DataFrame({'MAPE':mape, 'Parameters' : parameters})
        #model_parameters = model_parameters.append({'MAPE':MAPE,'Parameters':p},ignore_index=True)

    params = model_parameters[model_parameters.MAPE == model_parameters.MAPE.min()].Parameters.values[0]
        
    return params, model_parameters
## Importando arquivos e ajustando
df = pd.read_excel(r"data/tb_faturamento 2.xlsx")   #ler documento
df = df.groupby(['produto','DATA']).sum('FAT').reset_index()   #ajustando e agrupando
df_prophet = df
df_prophet.rename(columns={'DATA': 'ds', 'FAT': 'y'}, inplace=True) 
df_prophet.head()    #acabou dataprep aqui!
#df.groupby(by=['MES_ANO','Produto']).agg({'Valor_Real':'sum','Data':'count', 'yhat' : 'sum', 'yhat_lower' : 'sum', 'yhat_upper' : 'sum' }).reset_index(drop=False)
df_prophet.sort_values(by=['produto','ds'], inplace=True)
#Usando o prophet para ajustar conforme modelo prophet solicita

df_D = df_prophet[df_prophet['produto'] == 'D'][['ds','y']]
df_CP = df_prophet[df_prophet['produto'] == 'CP'][['ds','y']]
df_CR = df_prophet[df_prophet['produto'] == 'CR'][['ds','y']]
## Extraindo a base de treino e teste
y_train_D, y_test_D = train_test_split(df_D, train_size=0.9, shuffle = False)   # extraindo base de treino e teste debito
y_train_CP, y_test_CP = train_test_split(df_CP, train_size=0.9, shuffle = False)   # extraindo base de treino e teste psj
y_train_CR, y_test_CR = train_test_split(df_CR, train_size=0.9, shuffle = False)   # extraindo base de treino e teste rotativo
## Base Geral de Feriados
## Treino e Teste
feriado_bf = pd.DataFrame({'holiday' : 'black_friday', 
                          'ds' : pd.to_datetime(['2021-11-24', '2022-11-24', '2023-11-24']),
                          'lower_window': -4,
                          'upper_window' : 2})
feriado_maes = pd.DataFrame({'holiday' : 'dia_das_maes', 
                          'ds' : pd.to_datetime(['2021-05-09', '2022-05-08', '2023-05-14']),
                          'lower_window': -4,
                          'upper_window' : 2})
feriado_pais = pd.DataFrame({'holiday' : 'dia_dos_pais', 
                          'ds' : pd.to_datetime(['2021-08-08', '2022-08-14', '2023-08-13']),
                          'lower_window': -4,
                          'upper_window' : 2})
feriado_namorados = pd.DataFrame({'holiday' : 'dia_dos_namorados', 
                          'ds' : pd.to_datetime(['2021-06-12', '2022-06-12', '2023-06-12']),
                          'lower_window': -4,
                          'upper_window' : 2})
#################  adicionar carnaval de 2021, 2022, 2023
feriados = pd.concat([feriado_bf, feriado_maes, feriado_pais, feriado_namorados])
## Tuning dos parâmetros (turbinar e trazer os menores erros do modelo)


params_grid = {'seasonality_mode':('additive','multiplicative'),
          'holidays_prior_scale' : [0.01,0.1,1,10],
          'changepoint_prior_scale':[0.001,0.02,0.05,0.2,0.35,0.5],
          'seasonality_prior_scale': [0.01, 0.1, 1.0, 10.0]
            }
params_deb, df_parameters_deb = grid_search(y_train_D, y_test_D, params_grid, bt = y_test_D.shape[0], holidays = feriados,verbose = False)
### Débito
model_d = Prophet(**params_deb, weekly_seasonality = True, interval_width=0.95, holidays = feriados)
model_d.add_country_holidays(country_name='BR')
model_d.fit(y_train_D)    #treinar o modelo
train_deb_forecast = model_d.make_future_dataframe(periods = y_test_D.shape[0], include_history=False)   #criando a base para projetar
train_deb_forecast = model_d.predict(y_test_D)  #testando
train_deb_forecast['MES_ANO'] = train_deb_forecast['ds'].apply(lambda x: x.strftime('%m-%Y')) 
train_deb_forecast['Produto']='D'
train_deb_forecast=train_deb_forecast.rename(columns={'ds':'Data'})
train_deb_forecast.sort_values(by='Data', ascending=True, inplace=True)
train_deb_forecast.head()
### Validando o modelo - Débito
y_true = y_test_D['y']
y_pred = train_deb_forecast['yhat']
mean_absolute_percentage_error(y_true, y_pred)
#erro antigo 0.08261084200109513
mean_absolute_percentage_error(y_true, y_pred)
### Gráfico
plt.figure(figsize = (20,10))
sns.lineplot(data = df_D, x = 'ds', y = 'y', label = 'Real')
sns.lineplot(data = train_deb_forecast, x = 'Data', y = 'yhat', label='Projecao')
### Tuning dos parâmetros (turbinar e trazer os menores erros do modelo)
params_grid = {'seasonality_mode':('additive','multiplicative'),
          'holidays_prior_scale' : [0.01,0.1,1,10],
          'changepoint_prior_scale':[0.001,0.02,0.05,0.2,0.35,0.5],
          'seasonality_prior_scale': [0.01, 0.1, 1.0, 10.0]
            }
params_psj, df_parameters_psj = grid_search(y_train_CP, y_test_CP, params_grid, bt = y_test_CP.shape[0], holidays = feriados,verbose = False)
### PSJ
model_psj = Prophet(**params_psj, weekly_seasonality = True, interval_width=0.95, holidays = feriados)
model_psj.add_country_holidays(country_name='BR')
model_psj.fit(y_train_CP)
train_psj_forecast = model_psj.make_future_dataframe(periods = y_test_CP.shape[0], include_history=False)
train_psj_forecast = model_psj.predict(y_test_CP)
train_psj_forecast['MES_ANO'] = train_psj_forecast['ds'].apply(lambda x: x.strftime('%m-%Y')) 
train_psj_forecast['Produto']='CP'
train_psj_forecast=train_psj_forecast.rename(columns={'ds':'Data'})
### validando o modelo - PSJ
y_true = y_test_CP['y']
y_pred = train_psj_forecast['yhat']
mean_absolute_percentage_error(y_true, y_pred)
mean_absolute_percentage_error(y_true, y_pred)
## Gráfico
plt.figure(figsize = (20,10))
sns.lineplot(data = df_CP, x = 'ds', y = 'y', label = 'Real')
sns.lineplot(data = train_psj_forecast, x = 'Data', y = 'yhat', label='Projecao')
### Tuning dos parâmetros (turbinar e trazer os menores erros do modelo)

params_grid = {'seasonality_mode':('additive','multiplicative'),
          'holidays_prior_scale' : [0.01,0.1,1,10],
          'changepoint_prior_scale':[0.001,0.02,0.05,0.2,0.35,0.5],
          'seasonality_prior_scale': [0.01, 0.1, 1.0, 10.0]
            }
params_rot, df_parameters_rot = grid_search(y_train_CR, y_test_CR, params_grid, bt = y_test_CR.shape[0], holidays = feriados,verbose = False)
### ROT
model_rot = Prophet(**params_rot, weekly_seasonality = True, interval_width=0.95, holidays = feriados)

model_rot.add_country_holidays(country_name='BR')
model_rot.fit(y_train_CR)
train_rot_forecast = model_rot.make_future_dataframe(periods = y_test_CR.shape[0], include_history=False)
train_rot_forecast = model_rot.predict(y_test_CR)
train_rot_forecast['MES_ANO'] = train_rot_forecast['ds'].apply(lambda x: x.strftime('%m-%Y'))
train_rot_forecast['Produto']='CR'
train_rot_forecast=train_rot_forecast.rename(columns={'ds':'Data'})
### Validando o modelo - CR
y_true = y_test_CR['y']
y_pred = train_rot_forecast['yhat']
mean_absolute_percentage_error(y_true, y_pred)
mean_absolute_percentage_error(y_true, y_pred)
## Gráfico
plt.figure(figsize = (20,10))
sns.lineplot(data = df_CR, x = 'ds', y = 'y', label = 'Real')
sns.lineplot(data = train_rot_forecast, x = 'Data', y = 'yhat', label='Projecao')
### Concatenar
train_forecast_final = pd.concat([train_deb_forecast, train_psj_forecast, train_rot_forecast])
train_forecast_final=df.merge(train_forecast_final[['Data', 'Produto', 'yhat', 'yhat_lower', 'yhat_upper']],how = 'left', left_on=['ds', 'produto'],right_on = ['Data', 'Produto'])
train_forecast_final.to_excel('train_forecast_final.xlsx')   #extraindo treino e teste
## Projeção Débito
m_deb = Prophet(**params_deb, weekly_seasonality = True, interval_width=0.95, holidays = feriados)
m_deb.fit(df_D)
f = m_deb.make_future_dataframe(periods=90,include_history=False)
forecast_deb = m_deb.predict(f)
forecast_deb[['ds', 'yhat', 'yhat_lower', 'yhat_upper']]
forecast_deb.rename(columns={'ds': 'Data', 'yhat': 'Projetado', 'yhat_lower': 'Limite_Inferior', 'yhat_upper': 'Limite_Superior'}, inplace=True) 
forecast_deb['Produto'] = 'D'
forecast_deb[['Produto', 'Data', 'Projetado', 'Limite_Inferior', 'Limite_Superior']] 
## Projeção Crédito PSJ

m_psj = Prophet(**params_psj, weekly_seasonality = True, interval_width=0.95, holidays = feriados)
m_psj.fit(df_CP)
f = m_psj.make_future_dataframe(periods=90,include_history=False)
forecast_psj = m_psj.predict(f)
forecast_psj[['ds', 'yhat', 'yhat_lower', 'yhat_upper']]
forecast_psj.rename(columns={'ds': 'Data', 'yhat': 'Projetado', 'yhat_lower': 'Limite_Inferior', 'yhat_upper': 'Limite_Superior'}, inplace=True) 
forecast_psj['Produto'] = 'CP'
forecast_psj[['Produto','Data', 'Projetado', 'Limite_Inferior', 'Limite_Superior']]
## Projeção Crédito ROT

m_rot = Prophet(**params_rot, weekly_seasonality = True, interval_width=0.95, holidays = feriados)
m_rot.fit(df_CR)
f = m_rot.make_future_dataframe(periods=90,include_history=False)
forecast_rot = m_rot.predict(f)
forecast_rot[['ds', 'yhat', 'yhat_lower', 'yhat_upper']]
forecast_rot.rename(columns={'ds': 'Data', 'yhat': 'Projetado', 'yhat_lower': 'Limite_Inferior', 'yhat_upper': 'Limite_Superior'}, inplace=True) 
forecast_rot['Produto'] = 'CR'
forecast_rot[['Produto', 'Data', 'Projetado', 'Limite_Inferior', 'Limite_Superior']]
## Concatenando 
m_total = pd.concat([forecast_deb, forecast_psj, forecast_rot])
m_total = m_total.reset_index()
m_total[['Produto', 'Data', 'Projetado', 'Limite_Inferior', 'Limite_Superior']]
m_total[['Produto', 'Data', 'Projetado', 'Limite_Inferior', 'Limite_Superior']].to_excel('faturamento_diario.xlsx')
df_prophet.rename(columns={'produto': 'Produto', 'ds': 'Data', 'y': 'Valor_Real'},inplace = True)
m_total = pd.concat([m_total, df_prophet ])
m_total[['Produto', 'Data', 'Valor_Real', 'Projetado', 'Limite_Inferior', 'Limite_Superior']].sort_values(by=['Produto', 'Data'])
# Gráficos
plt.figure(figsize=(20,10))     #ajustando o tamanho do grafico
sns.lineplot(x = m_total[m_total['Produto'] == 'D']['Data'], y = m_total[m_total['Produto'] == 'D']['Projetado'])
sns.lineplot(x = m_total[m_total['Produto'] == 'D']['Data'], y = m_total[m_total['Produto'] == 'D']['Valor_Real'])
# Treino 
# Teste
# Validação do Modelo

